<?php
/*
 * Croissant Web Framework
 *
 * @author Tom Gordon <tom.gordon@apsumon.com>
 * @copyright 2009-2017 Tom Gordon
 *
 */
class FourSquare extends Core {

	/** @var String $BaseUrl The base url for the foursquare API */
	static $baseUrl = '';
	/** @var String $AuthUrl The url for obtaining the auth access code */
	static $authUrl = 'https://foursquare.com/oauth2/authenticate';
	/** @var String $TokenUrl The url for obtaining an auth token */
	static $tokenUrl = 'https://foursquare.com/oauth2/access_token';

	/** @var String $ClientID */
	static $clientID;
	/** @var String $ClientSecret */
	static $clientSecret;
	/** @var String $RedirectUri */
	static $redirectUri;
	/** @var String $AuthToken */
	static $authToken;

	static $core;

	public function __construct() {}
	protected function __clone() {}
	public static function initialise() {
		if (!isset(self::$core)) {
			if (DEBUG) _log(__CLASS__.'::'.__FUNCTION__);
			self::$core = parent::initialise();

			self::$baseUrl = FOURSQUARE_BASEURL.'v2/';
			self::$clientID = FOURSQUARE_CLIENTID;
			self::$clientSecret = FOURSQUARE_CLIENTSECRET;
			self::$redirectUri = '';
		}
	}

	/**
	 * Request
	 * Performs a cUrl request with a url generated by _makeUrl. The useragent of the request is hardcoded
	 * as the Google Chrome Browser agent
	 * @param String $url The base url to query
	 * @param Array $params The parameters to pass to the request
	 */
	private static function _request($url, $params = false, $type = HTTP_GET){

		// Populate data for the GET request
		if($type == HTTP_GET) {
			$url = self::_makeUrl($url, $params);
		}

		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL,$url);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
		if ( isset($_SERVER['HTTP_USER_AGENT']) ) {
			curl_setopt($ch, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT'] );
		} else {
			// Handle the useragent like we are Google Chrome
			curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.X.Y.Z Safari/525.13.');
		}
		curl_setopt($ch, CURLOPT_TIMEOUT, 30);
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

		// Populate the data for POST
		if($type == HTTP_POST){
			curl_setopt($ch, CURLOPT_POST, 1);
			if ($params) curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
		}

		$result = curl_exec($ch);
		$info = curl_getinfo($ch);
		curl_close($ch);
		return $result;
	}

	/**
	 * MakeUrl
	 * Takes a base url and an array of parameters and sanitizes the data, then creates a complete
	 * url with each parameter as a GET parameter in the URL
	 * @param String $url The base URL to append the query string to (without any query data)
	 * @param Array $params The parameters to pass to the URL
	 */
	private static function _makeUrl($url, $params){
		if(!empty($params) && $params) {
			foreach($params as $k=>$v) $kv[] = "$k=$v";
			$url_params = str_replace(" ","+",implode('&',$kv));
			$url = trim($url) . '?' . $url_params;
		}
		return $url;
	}

	/**
	 * GetPublic
	 * Performs a request for a public resource
	 * @param String $endpoint A particular endpoint of the Foursquare API
	 * @param Array $params A set of parameters to be appended to the request, defaults to false (none)
	 */
	public static function GetPublic($endpoint, $params = false){
		// Build the endpoint URL
		$url = self::$baseUrl . trim($endpoint,"/");

		// Append the client details
		$params['client_id'] = self::$clientID;
		$params['client_secret'] = self::$clientSecret;
		$params['v'] = '20120608';

//		dump($url);dump($params);

		// Return the result;
		return self::_request($url, $params);
	}

	/**
	 * GetPrivate
	 * Performs a request for a private resource
	 * @param String $endpoint A particular endpoint of the Foursquare API
	 * @param Array $params A set of parameters to be appended to the request, defaults to false (none)
	 * @param bool $POST whether or not to use a POST request
	 */
	public static function GetPrivate($endpoint, $params = false, $POST = false) {
		$url = self::$baseUrl . trim($endpoint,"/");
		$params['oauth_token'] = self::$authToken;
		$params['v'] = 'v2';
		if (!$POST) {
			return self::_request($url, $params);
		} else {
			return self::_request($url, $params, HTTP_POST);
		}
	}

}